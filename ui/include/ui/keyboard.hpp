#pragma once

#include <string>
#include <string_view>
#include <core/enum_util.hpp>

namespace ui
{
	enum class keys;
	enum class scancodes;
	enum class modifiers;

	[[nodiscard]] const std::string_view to_string(keys key);
	[[nodiscard]] const std::string_view to_string(scancodes code);
	[[nodiscard]] std::string to_string(modifiers mods);

	enum class modifiers
	{
		none = 0x0000,

		left_shift = 0x0001,
		right_shift = 0x0002,
		left_ctrl = 0x0040,
		right_ctrl = 0x0080,
		left_alt = 0x0100,
		right_alt = 0x0200,
		left_gui = 0x0400,
		right_gui = 0x0800,

		num = 0x1000,
		caps = 0x2000,
		mode = 0x4000,

		shift = left_shift | right_shift,
		ctrl = left_ctrl | right_ctrl,
		alt = left_alt | right_alt,
		gui = left_gui | right_gui,
	};

	CORE_MAKE_FLAG_ENUM(modifiers);

	enum class keys
	{
		unknown,

		enter,
		escape,
		backspace,
		tab,
		space,
		exclaim,
		quotedbl,
		hash,
		percent,
		dollar,
		ampersand,
		quote,
		left_paren,
		right_paren,
		asterisk,
		plus,
		comma,
		minus,
		period,
		slash,
		num_0,
		num_1,
		num_2,
		num_3,
		num_4,
		num_5,
		num_6,
		num_7,
		num_8,
		num_9,
		colon,
		semicolon,
		less,
		equals,
		greater,
		question,
		at,

		left_bracket,
		backslash,
		right_bracket,
		caret,
		underscore,
		backquote,
		a,
		b,
		c,
		d,
		e,
		f,
		g,
		h,
		i,
		j,
		k,
		l,
		m,
		n,
		o,
		p,
		q,
		r,
		s,
		t,
		u,
		v,
		w,
		x,
		y,
		z,

		capslock,

		f1,
		f2,
		f3,
		f4,
		f5,
		f6,
		f7,
		f8,
		f9,
		f10,
		f11,
		f12,

		printscreen,
		scroll_lock,
		pause,
		insert,
		home,
		page_up,
		del,
		end,
		page_down,
		right,
		left,
		down,
		up,

		numlock_clear,
		kp_divide,
		kp_multiply,
		kp_minus,
		kp_plus,
		kp_enter,
		kp_1,
		kp_2,
		kp_3,
		kp_4,
		kp_5,
		kp_6,
		kp_7,
		kp_8,
		kp_9,
		kp_0,
		kp_period,

		application,
		power,
		kp_equals,
		f13,
		f14,
		f15,
		f16,
		f17,
		f18,
		f19,
		f20,
		f21,
		f22,
		f23,
		f24,
		execute,
		help,
		menu,
		select,
		stop,
		again,
		undo,
		cut,
		copy,
		paste,
		find,
		mute,
		volume_up,
		volume_down,
		kp_comma,
		kp_equalsas400,

		alterase,
		sysreq,
		cancel,
		clear,
		prior,
		return2,
		separator,
		out,
		oper,
		clear_again,
		crsel,
		exsel,

		kp_00,
		kp_000,
		thousands_separator,
		decimal_separator,
		currency_unit,
		currency_subunit,
		kp_left_paren,
		kp_right_paren,
		kp_left_brace,
		kp_right_brace,
		kp_tab,
		kp_backspace,
		kp_a,
		kp_b,
		kp_c,
		kp_d,
		kp_e,
		kp_f,
		kp_xor,
		kp_power,
		kp_percent,
		kp_less,
		kp_greater,
		kp_ampersand,
		kp_dblampersand,
		kp_verticalbar,
		kp_dblverticalbar,
		kp_colon,
		kp_hash,
		kp_space,
		kp_at,
		kp_exclam,
		kp_mem_store,
		kp_mem_recall,
		kp_mem_clear,
		kp_mem_add,
		kp_mem_subtract,
		kp_mem_multiply,
		kp_mem_divide,
		kp_plus_minus,
		kp_clear,
		kp_clear_entry,
		kp_binary,
		kp_octal,
		kp_decimal,
		kp_hexadecimal,

		left_ctrl,
		left_shift,
		left_alt,
		left_gui,
		right_ctrl,
		right_shift,
		right_alt,
		right_gui,

		mode,

		audio_next,
		audio_prev,
		audio_stop,
		audio_play,
		audio_mute,
		media_select,
		www,
		mail,
		calculator,
		computer,
		ac_search,
		ac_home,
		ac_back,
		ac_forward,
		ac_stop,
		ac_refresh,
		ac_bookmarks,

		brightness_down,
		brightness_up,
		display_switch,
		kbd_illum_toggle,
		kbd_illum_down,
		kbd_illum_up,
		eject,
		sleep,
		app1,
		app2,

		audio_rewind,
		audio_fast_forward,
	};

	enum class scancodes
	{
		unknown,
		a,
		b,
		c,
		d,
		e,
		f,
		g,
		h,
		i,
		j,
		k,
		l,
		m,
		n,
		o,
		p,
		q,
		r,
		s,
		t,
		u,
		v,
		w,
		x,
		y,
		z,

		num_1,
		num_2,
		num_3,
		num_4,
		num_5,
		num_6,
		num_7,
		num_8,
		num_9,
		num_0,

		enter,
		escape,
		backspace,
		tab,
		space,

		minus,
		equals,
		left_bracket,
		right_bracket,
		backslash,

		non_ushash,

		semicolon,
		apostrophe,
		grave,

		comma,
		period,
		slash,

		capslock,

		f1,
		f2,
		f3,
		f4,
		f5,
		f6,
		f7,
		f8,
		f9,
		f10,
		f11,
		f12,

		printscreen,
		scroll_lock,
		pause,
		insert,

		home,
		page_up,
		del,
		end,
		page_down,
		right,
		left,
		down,
		up,

		numlock_clear,

		kp_divide,
		kp_multiply,
		kp_minus,
		kp_plus,
		kp_enter,
		kp_1,
		kp_2,
		kp_3,
		kp_4,
		kp_5,
		kp_6,
		kp_7,
		kp_8,
		kp_9,
		kp_0,
		kp_period,

		non_usbackslash,

		application,
		power,

		kp_equals,
		f13,
		f14,
		f15,
		f16,
		f17,
		f18,
		f19,
		f20,
		f21,
		f22,
		f23,
		f24,
		execute,
		help,
		menu,
		select,
		stop,
		again,
		undo,
		cut,
		copy,
		paste,
		find,
		mute,
		volume_up,
		volume_down,

		kp_comma,
		kp_equalsas400,

		international1,
		international2,
		international3,
		international4,
		international5,
		international6,
		international7,
		international8,
		international9,
		lang1,
		lang2,
		lang3,
		lang4,
		lang5,
		lang6,
		lang7,
		lang8,
		lang9,

		alterase,
		sysreq,
		cancel,
		clear,
		prior,
		return2,
		separator,
		out,
		oper,
		clear_again,
		crsel,
		exsel,

		kp_00,
		kp_000,
		thousands_separator,
		decimal_separator,
		currency_unit,
		currency_subunit,
		kp_left_paren,
		kp_right_paren,
		kp_left_brace,
		kp_right_brace,
		kp_tab,
		kp_backspace,
		kp_a,
		kp_b,
		kp_c,
		kp_d,
		kp_e,
		kp_f,
		kp_xor,
		kp_power,
		kp_percent,
		kp_less,
		kp_greater,
		kp_ampersand,
		kp_dblampersand,
		kp_verticalbar,
		kp_dblverticalbar,
		kp_colon,
		kp_hash,
		kp_space,
		kp_at,
		kp_exclam,
		kp_mem_store,
		kp_mem_recall,
		kp_mem_clear,
		kp_mem_add,
		kp_mem_subtract,
		kp_mem_multiply,
		kp_mem_divide,
		kp_plus_minus,
		kp_clear,
		kp_clear_entry,
		kp_binary,
		kp_octal,
		kp_decimal,
		kp_hexadecimal,

		left_ctrl,
		left_shift,
		left_alt,
		left_gui,
		right_ctrl,
		right_shift,
		right_alt,
		right_gui,

		mode,

		audio_next,
		audio_prev,
		audio_stop,
		audio_play,
		audio_mute,
		media_select,
		www,
		mail,
		calculator,
		computer,
		ac_search,
		ac_home,
		ac_back,
		ac_forward,
		ac_stop,
		ac_refresh,
		ac_bookmarks,

		brightness_down,
		brightness_up,
		display_switch,

		kbd_illum_toggle,
		kbd_illum_down,
		kbd_illum_up,
		eject,
		sleep,

		app1,
		app2,

		audio_rewind,
		audio_fastforward,
	};
}

#include <fmt/format.h>

namespace fmt
{
	template <>
	struct fmt::formatter<ui::keys>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext &ctx) { return ctx.begin(); }

		template <typename FormatContext>
		auto format(const ui::keys &value, FormatContext &ctx)
		{
			return format_to(ctx.begin(), to_string(value));
		}
	};

	template <>
	struct fmt::formatter<ui::scancodes>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext &ctx) { return ctx.begin(); }

		template <typename FormatContext>
		auto format(const ui::scancodes &value, FormatContext &ctx)
		{
			return format_to(ctx.begin(), to_string(value));
		}
	};

	template <>
	struct fmt::formatter<ui::modifiers>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext &ctx) { return ctx.begin(); }

		template <typename FormatContext>
		auto format(const ui::modifiers &value, FormatContext &ctx)
		{
			return format_to(ctx.begin(), to_string(value));
		}
	};
}
